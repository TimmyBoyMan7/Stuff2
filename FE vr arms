-- THIS IS VERY GLITCHY! 

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local plr = Players.LocalPlayer
local mouse = plr:GetMouse()
local camera = workspace.CurrentCamera

-- Settings
local CROSSFADE_TIME = 0.5
local boxTransparency = 0.3
local idleArms = false
local idleTrack = nil

local rightAnimIds = {
    center = "rbxassetid://44420071", up = "rbxassetid://186904307", down = "rbxassetid://186908229",
    left = "rbxassetid://44448649", right = "rbxassetid://184467564", upleft = "rbxassetid://29517689",
    upright = "rbxassetid://44418205", downleft = "rbxassetid://44418501", downright = "rbxassetid://317460113"
}
local leftAnimIds = {
    center = "rbxassetid://42070828", up = "rbxassetid://90117804", down = "rbxassetid://93711728",
    left = "rbxassetid://48972693", right = "rbxassetid://61771068", upleft = "rbxassetid://93157368",
    upright = "rbxassetid://313724674", downleft = "rbxassetid://48972693", downright = "rbxassetid://181437419"
}
local bothAnimIds = {
    center = "rbxassetid://79419747", up = "rbxassetid://187951261", down = "rbxassetid://56153856",
    left = "rbxassetid://160725720", right = "rbxassetid://93060712", upleft = "rbxassetid://120731972",
    upright = "rbxassetid://93060724", downleft = "rbxassetid://47594746", downright = "rbxassetid://93060716"
}


local regionMap = {
    { "upleft", "up", "upright" },
    { "left", "center", "right" },
    { "downleft", "down", "downright" }
}

local function getMouseRegion()
    local mouseX = mouse.X / camera.ViewportSize.X
    local mouseY = mouse.Y / camera.ViewportSize.Y
    local col = mouseX < 1/3 and 1 or mouseX < 2/3 and 2 or 3
    local row = mouseY < 1/3 and 1 or mouseY < 2/3 and 2 or 3
    return regionMap[row][col], row, col
end


local function updateIdle()
    if idleArms then
        local char = plr.Character
        if char then
            local hum = char:FindFirstChildOfClass("Humanoid")
            if hum and not idleTrack then
                local anim = Instance.new("Animation")
                anim.AnimationId = bothAnimIds.center
                idleTrack = hum:LoadAnimation(anim)
                idleTrack.Looped = true
                idleTrack.Priority = Enum.AnimationPriority.Idle
                idleTrack:Play()
            end
        end
    else
        if idleTrack then
            idleTrack:Stop()
            idleTrack = nil
        end
    end
end


local function createArmTool(name, animIds, tooltip)
    local tool = Instance.new("Tool")
    tool.Name = name
    tool.RequiresHandle = false
    tool.ToolTip = tooltip
    tool.Parent = plr.Backpack

    local currentAnim, currentName, conn
    local animTracks = {}

    local function loadAnims(hum)
        for k, id in pairs(animIds) do
            local a = Instance.new("Animation")
            a.AnimationId = id
            animTracks[k] = hum:LoadAnimation(a)
            animTracks[k].Priority = Enum.AnimationPriority.Action
        end
    end

    local function crossfade(newName)
        if newName == currentName then return end
        local newAnim = animTracks[newName] or animTracks.center
        if currentAnim then currentAnim:AdjustWeight(0, CROSSFADE_TIME) end
        newAnim:Play()
        newAnim:AdjustWeight(1, CROSSFADE_TIME)
        currentAnim = newAnim
        currentName = newName
    end

    local function faceCam(root)
        local lv = Vector3.new(camera.CFrame.LookVector.X, 0, camera.CFrame.LookVector.Z).Unit
        if lv.Magnitude > 0 then
            root.CFrame = CFrame.new(root.Position, root.Position + lv)
        end
    end

    tool.Equipped:Connect(function()
        local char = plr.Character
        if not char then return end
        local hum = char:FindFirstChildOfClass("Humanoid")
        local root = char:FindFirstChild("HumanoidRootPart")
        if not hum or not root then return end
        loadAnims(hum)

        conn = RunService.RenderStepped:Connect(function()
            faceCam(root)
            local region = getMouseRegion()
            crossfade(region)
        end)
    end)

    tool.Unequipped:Connect(function()
        if currentAnim then currentAnim:Stop() end
        currentAnim = nil
        currentName = nil
        if conn then conn:Disconnect() conn = nil end
    end)

    return tool
end


for _, t in ipairs(plr.Backpack:GetChildren()) do
    if t:IsA("Tool") and (t.Name == "Right Hand" or t.Name == "Left Hand" or t.Name == "Both Hands") then
        t:Destroy()
    end
end

createArmTool("Left Hand", leftAnimIds, "Very Janky")
createArmTool("Both Hands", bothAnimIds, "A little janky")
createArmTool("Right Hand", rightAnimIds, "Smoothest")

nce.new("ScreenGui", plr:WaitForChild("PlayerGui"))
gui.Name = "ArmGui"
gui.ResetOnSpawn = true

local regionOverlay = Instance.new("Frame", gui)
regionOverlay.Size = UDim2.new(1, 0, 1, 0)
regionOverlay.BackgroundTransparency = 1
regionOverlay.ZIndex = 1

local boxes = {}
for row = 1, 3 do
    for col = 1, 3 do
        local box = Instance.new("Frame", regionOverlay)
        box.AnchorPoint = Vector2.new(0.5, 0.5)
        box.Size = UDim2.new(1/3, 0, 1/3, 0)
        box.Position = UDim2.new((col - 0.5)/3, 0, (row - 0.5)/3, 0)
        box.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
        box.BackgroundTransparency = boxTransparency
        box.BorderSizePixel = 0
        box.ZIndex = 1
        boxes[row .. "," .. col] = box
    end
end


local frame = Instance.new("Frame", gui)
frame.Size = UDim2.new(0, 300, 0, 200)
frame.Position = UDim2.new(0, 40, 0, 120)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true

Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 10)

local layout = Instance.new("UIListLayout", frame)
layout.Padding = UDim.new(0, 10)
layout.FillDirection = Enum.FillDirection.Vertical
layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
layout.SortOrder = Enum.SortOrder.LayoutOrder

local function makeSlider(labelText, min, max, default, onChange)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, -20, 0, 50)
    container.BackgroundTransparency = 1
    container.LayoutOrder = 1

    local label = Instance.new("TextLabel", container)
    label.Text = labelText
    label.Size = UDim2.new(1, 0, 0.4, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(1, 1, 1)
    label.Font = Enum.Font.Code
    label.TextScaled = true

    local bar = Instance.new("TextButton", container)
    bar.Size = UDim2.new(1, 0, 0.6, 0)
    bar.Position = UDim2.new(0, 0, 0.4, 0)
    bar.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    bar.Text = ""

    Instance.new("UICorner", bar).CornerRadius = UDim.new(0, 6)

    local fill = Instance.new("Frame", bar)
    fill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    fill.Size = UDim2.new((default - min)/(max - min), 0, 1, 0)
    fill.BorderSizePixel = 0
    Instance.new("UICorner", fill).CornerRadius = UDim.new(0, 6)

    bar.MouseButton1Down:Connect(function()
        local moveConn, upConn
        moveConn = RunService.RenderStepped:Connect(function()
            local x = UserInputService:GetMouseLocation().X - bar.AbsolutePosition.X
            local pct = math.clamp(x / bar.AbsoluteSize.X, 0, 1)
            fill.Size = UDim2.new(pct, 0, 1, 0)
            onChange(min + (max - min) * pct)
        end)
        upConn = UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                moveConn:Disconnect()
                upConn:Disconnect()
            end
        end)
    end)

    container.Parent = frame
end

local function makeToggle(text, default, callback)
    local btn = Instance.new("TextButton", frame)
    btn.Size = UDim2.new(1, -20, 0, 30)
    btn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    btn.TextColor3 = Color3.new(1,1,1)
    btn.Font = Enum.Font.Code
    btn.TextScaled = true
    btn.Text = text .. ": " .. (default and "ON" or "OFF")
    Instance.new("UICorner", btn)

    local state = default
    btn.MouseButton1Click:Connect(function()
        state = not state
        btn.Text = text .. ": " .. (state and "ON" or "OFF")
        callback(state)
    end)
end


makeSlider("Crossfade Time", 0.1, 2, CROSSFADE_TIME, function(val)
    CROSSFADE_TIME = val
end)

makeSlider("Box Transparency", 0, 1, boxTransparency, function(val)
    boxTransparency = val
end)

makeToggle("Idle Arms", false, function(val)
    idleArms = val
    updateIdle()
end)


RunService.RenderStepped:Connect(function()
    local _, row, col = getMouseRegion()
    for i = 1, 3 do
        for j = 1, 3 do
            local b = boxes[i .. "," .. j]
            if b then
                b.BackgroundTransparency = boxTransparency
                b.BackgroundColor3 = (i == row and j == col) and Color3.fromRGB(0, 200, 255) or Color3.fromRGB(0, 170, 255)
            end
        end
    end
end)


plr.CharacterAdded:Connect(function()
    updateIdle()
    plr.Character.ChildRemoved:Connect(function(obj)
        if obj:IsA("Tool") then task.delay(0.1, updateIdle) end
    end)
end)
